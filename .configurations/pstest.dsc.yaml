# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  configurationVersion: 0.2.0
  resources:
    - resource: PSDscResources/Script
      id: UpdatePowerToysConfig
      directives:
        description: Create or update PowerToys Keyboard Manager default.json file with custom key mappings
      settings:
        SetScript: |
          $defaultJsonPath = "C:\Users\dyigitbas\AppData\Local\Microsoft\PowerToys\Keyboard Manager\default.json"

          # Define the new content to be added to default.json
          $newJsonContent = @'
          {
              "remapKeys": {
                "inProcess": [
                  { "originalKeys": "91", "newRemapKeys": "162" },
                  { "originalKeys": "164", "newRemapKeys": "162" },
                  { "originalKeys": "162", "newRemapKeys": "91" }
                ]
              },
              "remapShortcuts": {
                "global": [
                  { "originalKeys": "162;9", "newRemapKeys": "91;160;39" },
                  { "originalKeys": "162;32", "newRemapKeys": "162;221" },
                  { "originalKeys": "162;72", "newRemapKeys": "164;27" },
                  { "originalKeys": "162;160;83", "newRemapKeys": "91;160;83" }
                ],
                "appSpecific": [
                  {
                    "originalKeys": "162;160;32",
                    "newRemapKeys": "162;9",
                    "targetApp": "chrome.exe"
                  }
                ]
              }
          }
          '@

          # Create the directory if it doesn't exist
          $directory = [System.IO.Path]::GetDirectoryName($defaultJsonPath)
          if (-not (Test-Path $directory)) {
              New-Item -Path $directory -ItemType Directory | Out-Null
          }

          # Check if the file exists, and create it if not
          if (-not (Test-Path $defaultJsonPath)) {
              New-Item -Path $defaultJsonPath -ItemType File | Out-Null
          }

          # Update the file with the new content
          try {
              $newJsonContent | Set-Content -Path $defaultJsonPath -Force
              Write-Host "Updated $defaultJsonPath successfully."
          } catch {
              Write-Error "Failed to update the file: $_"
              throw $_
          }
        GetScript: return $false
        TestScript: return $false
