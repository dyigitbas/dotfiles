# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  configurationVersion: 0.2.0
  ########################################
  ### ASSERTIONS: System Requirements
  ########################################
  assertions:
    ### Assertion: OS Version
    ### -------------------------------------
    - resource: Microsoft.Windows.Developer/OsVersion
      id: OsVersion
      directives:
        description: Minimum OS version requirement
        allowPrerelease: true
      settings:
        MinVersion: "10.0.22000"
  ########################################
  ### RESOURCES: System Configuration
  ########################################
  resources:
    ########################################
    ### Initialization
    ########################################
    ### Install Git
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: git
      directives:
        description: Install Git
        allowPrerelease: true
      settings:
        id: Git.Git
    ### Enable: Developer Mode
    ### -------------------------------------
    - resource: Microsoft.Windows.Developer/DeveloperMode
      directives:
        description: Enable Developer Mode
        allowPrerelease: true
      settings:
        Ensure: Present
     ### Show file extensions and hidden files
     ### -------------------------------------
    - resource: Microsoft.Windows.Developer/WindowsExplorer
      directives:
        description: Show File Extensions and hidden files
        allowPrerelease: true
      settings:
        FileExtensions: Show
        HiddenFiles: Show
    ########################################
    ### Install CLIs, SDKs & Tools
    ########################################
    ### Install DevHome
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: DevHome
      directives:
        description: Install DevHome
        allowPrerelease: true
      settings:
        id: Microsoft.DevHome
    ### Install DevHome Azure Extension
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      dependsOn:
        - DevHome
      directives:
        description: Install DevHome Azure Extension
        allowPrerelease: true
      settings:
        id: 9MV8F79FGXTR
    ### Install DevHome GitHub Extension
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      dependsOn:
        - DevHome
      directives:
        description: Install DevHome GitHub Extension
        allowPrerelease: true
      settings:
        id: 9NZCC27PR6N6
    ### Install Powershell
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install Powershell
        allowPrerelease: true
      settings:
        id: Microsoft.PowerShell
    ### Install Azure CLI
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: azurecli
      directives:
        description: Install Azure CLI
        allowPrerelease: true
      settings:
       id:  Microsoft.AzureCLI
    ### Install Azd
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install Azd
        allowPrerelease: true
      settings:
        id: Microsoft.Azd
    ### Install Visual Studio Code
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: vscode
      directives:
        description: Install Microsoft Visual Studio Code
        allowPrerelease: true
      settings:
        id: Microsoft.VisualStudioCode
        ensure: Present
    ### Install Visual Sudio
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: vside
      directives:
       description: Install Visual Studio 2022
       allowPrerelease: true
      settings:
        id: Microsoft.VisualStudio.2022.Community.Preview
    ### Install Google Chrome
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install Google Chrome
        allowPrerelease: true
      settings:
        id: Google.Chrome
    ### Install Microsoft PowerToys
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install Microsoft PowerToys
        allowPrerelease: true
      settings:
        id: Microsoft.PowerToys
    ########################################
    ### Configure settings
    ########################################
    ### Git Configure Name
    ### -------------------------------------
    - resource: GitDsc/GitConfigUserName
      directives:
        description: Configure Git
        allowPrerelease: true
      dependsOn:
        - git
      settings:
         UserName: "dyigitbas"
         ConfigLocation: "Global"
    ### Git Configure Email
    ### -------------------------------------
    - resource: GitDsc/GitConfigUserEmail
      directives:
        description: Configure Git
        allowPrerelease: true
      dependsOn:
        - git
      settings:
         UserEmail: "89029269+dyigitbas@users.noreply.github.com"
         ConfigLocation: "Global"
    ### Install VS Code Extensions
    ### -------------------------------------
    - resource: PSDscResources/Script
      id: vscodeextensions
      dependsOn:
        - vscode
      directives:
        description: Install Python Extension for VS Code
      settings:
        SetScript: |
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User") 
          code --install-extension github.copilot
          code --install-extension devcenter.ms-devbox
          code --install-extension ms-vscode.powershell
          code --install-extension ms-dotnettools.csdevkit
          code --install-extension ms-azuretools.azure-dev
        GetScript: return $false
        TestScript: return $false
    ########################################
    ### Denizhan Custom
    ########################################
    - resource: PSDscResources/Script
      id: bicep
      directives:
        description: Install Bicep for Azure CLI
      settings:
        SetScript: |
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          az config set bicep.use_binary_from_path=False --only-show-errors
          az bicep install --only-show-errors
        GetScript: return $false
        TestScript: return $false

    - resource: PSDscResources/Script
      id: CreateTestFile
      directives:
        description: Create a test file in C:\Users\dyigitbas\source\repos
      settings:
        SetScript: |
          $filePath = "C:\Users\dyigitbas\source\repos\testfile.txt"
          if (-not (Test-Path $filePath)) {
              New-Item -Path $filePath -ItemType File
          }
        GetScript: return $false
        TestScript: return $false

    # - resource: PSDscResources/Script
    #   id: CreateTestFile
    #   properties:
    #     GetScript:
    #       Script: |
    #         @{
    #           Result = (Test-Path -Path "C:\Temp\DSCTest.txt")
    #         }
    #     TestScript:
    #       Script: |
    #         Test-Path -Path "C:\Temp\DSCTest.txt"
    #     SetScript:
    #       Script: |
    #         $folderPath = "C:\Temp"
    #         $filePath = Join-Path -Path $folderPath -ChildPath "DSCTest.txt"
            
    #         if (-not (Test-Path -Path $folderPath)) {
    #           New-Item -ItemType Directory -Path $folderPath -Force
    #         }
            
    #         "This file was created by DSC" | Out-File -FilePath $filePath -Force
    #         Write-Host "Test file created at $filePath"
