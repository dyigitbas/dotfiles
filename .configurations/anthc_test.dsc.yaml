# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  configurationVersion: 0.2.0
  ########################################
  ### ASSERTIONS: System Requirements
  ########################################
  assertions:
    ### Assertion: OS Version
    ### -------------------------------------
    - resource: Microsoft.Windows.Developer/OsVersion
      id: OsVersion
      directives:
        description: Minimum OS version requirement
        allowPrerelease: true
      settings:
        MinVersion: "10.0.22000"
  ########################################
  ### RESOURCES: System Configuration
  ########################################
  resources:
    ########################################
    ### Initialization
    ########################################
    ### Install Git
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: git
      directives:
        description: Install Git
        allowPrerelease: true
      settings:
        id: Git.Git
    ### Enable: Developer Mode
    ### -------------------------------------
    - resource: Microsoft.Windows.Developer/DeveloperMode
      directives:
        description: Enable Developer Mode
        allowPrerelease: true
      settings:
        Ensure: Present
     ### Show file extensions and hidden files
     ### -------------------------------------
    - resource: Microsoft.Windows.Developer/WindowsExplorer
      directives:
        description: Show File Extensions and hidden files
        allowPrerelease: true
      settings:
        FileExtensions: Show
        HiddenFiles: Show
    ########################################
    ### Install CLIs, SDKs & Tools
    ########################################
    ### Install DevHome
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: DevHome
      directives:
        description: Install DevHome
        allowPrerelease: true
      settings:
        id: Microsoft.DevHome
    ### Install DevHome Azure Extension
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      dependsOn:
        - DevHome
      directives:
        description: Install DevHome Azure Extension
        allowPrerelease: true
      settings:
        id: 9MV8F79FGXTR
    ### Install DevHome GitHub Extension
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      dependsOn:
        - DevHome
      directives:
        description: Install DevHome GitHub Extension
        allowPrerelease: true
      settings:
        id: 9NZCC27PR6N6
    ### Install Powershell
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install Powershell
        allowPrerelease: true
      settings:
        id: Microsoft.PowerShell
    ### Install Azure CLI
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: azurecli
      directives:
        description: Install Azure CLI
        allowPrerelease: true
      settings:
       id:  Microsoft.AzureCLI
    ### Install Azd
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install Azd
        allowPrerelease: true
      settings:
        id: Microsoft.Azd
    ### Install Visual Studio Code
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: vscode
      directives:
        description: Install Microsoft Visual Studio Code
        allowPrerelease: true
      settings:
        id: Microsoft.VisualStudioCode
        ensure: Present
    ### Install Visual Sudio
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: vside
      directives:
       description: Install Visual Studio 2022
       allowPrerelease: true
      settings:
        id: Microsoft.VisualStudio.2022.Community.Preview
    ### Install Google Chrome
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install Google Chrome
        allowPrerelease: true
      settings:
        id: Google.Chrome
    ### Install Microsoft PowerToys
    ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install Microsoft PowerToys
        allowPrerelease: true
      settings:
        id: Microsoft.PowerToys
    ########################################
    ### Configure settings
    ########################################
    ### Git Configure Name
    ### -------------------------------------
    - resource: GitDsc/GitConfigUserName
      directives:
        description: Configure Git
        allowPrerelease: true
      dependsOn:
        - git
      settings:
         UserName: "dyigitbas"
         ConfigLocation: "Global"
    ### Git Configure Email
    ### -------------------------------------
    - resource: GitDsc/GitConfigUserEmail
      directives:
        description: Configure Git
        allowPrerelease: true
      dependsOn:
        - git
      settings:
         UserEmail: "89029269+dyigitbas@users.noreply.github.com"
         ConfigLocation: "Global"
    ### Install VS Code Extensions
    ### -------------------------------------
    - resource: PSDscResources/Script
      id: vscodeextensions
      dependsOn:
        - vscode
      directives:
        description: Install Python Extension for VS Code
      settings:
        SetScript: |
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User") 
          code --install-extension github.copilot
          code --install-extension devcenter.ms-devbox
          code --install-extension ms-vscode.powershell
          code --install-extension ms-dotnettools.csdevkit
          code --install-extension ms-azuretools.azure-dev
        GetScript: return $false
        TestScript: return $false
    ########################################
    ### Denizhan Custom
    ########################################
    ### Run PowerShell Script to Configure PowerToys Keyboard Manager
    - resource: Microsoft.Powershell/Script
      directives:
        description: Configure PowerToys Keyboard Manager with Custom Mappings
        allowPrerelease: true
      settings:
        # This script modifies the PowerToys configuration file with custom key mappings
        Script: |
          $powerToysConfigPath = "$env:LOCALAPPDATA\Microsoft\PowerToys\Keyboard Manager\default.json"

          if (-Not (Test-Path $powerToysConfigPath)) {
              Write-Host "PowerToys configuration file not found. Make sure PowerToys is installed and has been run at least once."
              exit 1
          }

          $config = Get-Content $powerToysConfigPath -Raw | ConvertFrom-Json

          $keyRemapping = @(
              @{
                  OriginalKeys = @{
                      Key = "Win";
                      Code = 91;
                      Type = "Win"
                  }
                  NewKeys = @{
                      Key = "Ctrl";
                      Code = 162;
                      Type = "Ctrl"
                  }
              },
              @{
                  OriginalKeys = @{
                      Key = "Alt";
                      Code = 164;
                      Type = "Alt"
                  }
                  NewKeys = @{
                      Key = "Ctrl";
                      Code = 162;
                      Type = "Ctrl"
                  }
              },
              @{
                  OriginalKeys = @{
                      Key = "Ctrl";
                      Code = 162;
                      Type = "Ctrl"
                  }
                  NewKeys = @{
                      Key = "Win";
                      Code = 91;
                      Type = "Win"
                  }
              }
          )

          $shortcutRemapping = @(
              @{
                  OriginalKeys = @(
                      @{ Key = "Ctrl"; Code = 162; Type = "Ctrl" },
                      @{ Key = "Tab"; Code = 9; Type = "Tab" }
                  )
                  NewKeys = @(
                      @{ Key = "Win"; Code = 91; Type = "Win" },
                      @{ Key = "Shift"; Code = 160; Type = "Shift" },
                      @{ Key = "Right"; Code = 39; Type = "Right" }
                  )
                  TargetApp = "All Apps"
              },
              @{
                  OriginalKeys = @(
                      @{ Key = "Ctrl"; Code = 162; Type = "Ctrl" },
                      @{ Key = "Space"; Code = 32; Type = "Space" }
                  )
                  NewKeys = @(
                      @{ Key = "Ctrl"; Code = 162; Type = "Ctrl" },
                      @{ Key = "]"; Code = 221; Type = "Oem6" }
                  )
                  TargetApp = "All Apps"
              },
              @{
                  OriginalKeys = @(
                      @{ Key = "Ctrl"; Code = 162; Type = "Ctrl" },
                      @{ Key = "H"; Code = 72; Type = "H" }
                  )
                  NewKeys = @(
                      @{ Key = "Alt"; Code = 164; Type = "Alt" },
                      @{ Key = "Esc"; Code = 27; Type = "Esc" }
                  )
                  TargetApp = "All Apps"
              },
              @{
                  OriginalKeys = @(
                      @{ Key = "Ctrl"; Code = 162; Type = "Ctrl" },
                      @{ Key = "Shift"; Code = 160; Type = "Shift" },
                      @{ Key = "S"; Code = 83; Type = "S" }
                  )
                  NewKeys = @(
                      @{ Key = "Win"; Code = 91; Type = "Win" },
                      @{ Key = "Shift"; Code = 160; Type = "Shift" },
                      @{ Key = "S"; Code = 83; Type = "S" }
                  )
                  TargetApp = "All Apps"
              },
              @{
                  OriginalKeys = @(
                      @{ Key = "Ctrl"; Code = 162; Type = "Ctrl" },
                      @{ Key = "Shift"; Code = 160; Type = "Shift" },
                      @{ Key = "Space"; Code = 32; Type = "Space" }
                  )
                  NewKeys = @(
                      @{ Key = "Ctrl"; Code = 162; Type = "Ctrl" },
                      @{ Key = "Tab"; Code = 9; Type = "Tab" }
                  )
                  TargetApp = "chrome.exe"
              }
          )

          $config.remapKeys = $keyRemapping
          $config.remapShortcuts = $shortcutRemapping

          $updatedConfig = $config | ConvertTo-Json -Depth 10
          $updatedConfig | Set-Content $powerToysConfigPath

          Write-Host "PowerToys Keyboard Manager configuration updated successfully."

